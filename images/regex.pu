@startuml
class ASCII { 
    ~ {static} int UPPER
    ~ {static} int LOWER
    ~ {static} int DIGIT
    ~ {static} int SPACE
    ~ {static} int PUNCT
    ~ {static} int CNTRL
    ~ {static} int BLANK
    ~ {static} int HEX
    ~ {static} int UNDER
    ~ {static} int ASCII
    ~ {static} int ALPHA
    ~ {static} int ALNUM
    ~ {static} int GRAPH
    ~ {static} int WORD
    ~ {static} int XDIGIT
    ~ {static} [I ctype

    ~ {static} boolean isAscii(int arg0) 
    ~ {static} boolean isAlnum(int arg0) 
    ~ {static} boolean isGraph(int arg0) 
    ~ {static} boolean isPrint(int arg0) 
    ~ {static} boolean isPunct(int arg0) 
    ~ {static} boolean isHexDigit(int arg0) 
    ~ {static} boolean isOctDigit(int arg0) 
    ~ {static} boolean isCntrl(int arg0) 
    ~ {static} boolean isWord(int arg0) 
    ~ {static} int toDigit(int arg0) 
    ~ {static} int getType(int arg0) 
    ~ {static} boolean isType(int arg0, int arg1) 
    ~ {static} boolean isDigit(int arg0) 
    ~ {static} int toLower(int arg0) 
    ~ {static} boolean isSpace(int arg0) 
    ~ {static} int toUpper(int arg0) 
    ~ {static} boolean isUpper(int arg0) 
    ~ {static} boolean isLower(int arg0) 
    ~ {static} boolean isAlpha(int arg0) 
} 

interface MatchResult { 
    + {abstract} int groupCount() 
    + {abstract} String group() 
    + {abstract} String group(int arg0) 
    + {abstract} int start() 
    + {abstract} int start(int arg0) 
    + {abstract} int end() 
    + {abstract} int end(int arg0) 
} 

class Matcher implements MatchResult { 
    ~ Pattern parentPattern
    ~ [I groups
    ~ int from
    ~ int to
    ~ int lookbehindTo
    ~ CharSequence text
    ~ {static} int ENDANCHOR
    ~ {static} int NOANCHOR
    ~ int acceptMode
    ~ int first
    ~ int last
    ~ int oldLast
    ~ int lastAppendPosition
    ~ [I locals
    ~ boolean hitEnd
    ~ boolean requireEnd
    ~ boolean transparentBounds
    ~ boolean anchoringBounds

    + int groupCount() 
    + boolean hitEnd() 
    + boolean requireEnd() 
    + MatchResult toMatchResult() 
    + Matcher usePattern(Pattern arg0) 
    + boolean lookingAt() 
    + int regionStart() 
    + int regionEnd() 
    + boolean hasTransparentBounds() 
    + Matcher useTransparentBounds(boolean arg0) 
    + boolean hasAnchoringBounds() 
    + Matcher useAnchoringBounds(boolean arg0) 
    ~ int getTextLength() 
    ~ CharSequence getSubSequence(int arg0, int arg1) 
    ~ int getMatchedGroupIndex(String arg0) 
    + String group(int arg0) 
    + String group() 
    + String group(String arg0) 
    + String toString() 
    ~ char charAt(int arg0) 
    + boolean matches() 
    + String replaceFirst(String arg0) 
    + String replaceAll(String arg0) 
    + {static} String quoteReplacement(String arg0) 
    + boolean find(int arg0) 
    + boolean find() 
    + int start() 
    + int start(String arg0) 
    + int start(int arg0) 
    + Matcher reset() 
    + Matcher reset(CharSequence arg0) 
    ~ boolean search(int arg0) 
    ~ boolean match(int arg0, int arg1) 
    + Matcher appendReplacement(StringBuffer arg0, String arg1) 
    + StringBuffer appendTail(StringBuffer arg0) 
    + Matcher region(int arg0, int arg1) 
    + int end() 
    + int end(String arg0) 
    + int end(int arg0) 
    + Pattern pattern() 
} 

class Pattern implements Serializable { 
    + {static} int UNIX_LINES
    + {static} int CASE_INSENSITIVE
    + {static} int COMMENTS
    + {static} int MULTILINE
    + {static} int LITERAL
    + {static} int DOTALL
    + {static} int UNICODE_CASE
    + {static} int CANON_EQ
    + {static} int UNICODE_CHARACTER_CLASS
    ~ {static} long serialVersionUID
    ~ String pattern
    ~ int flags
    ~ boolean compiled
    ~ String normalizedPattern
    ~ Pattern$Node root
    ~ Pattern$Node matchRoot
    ~ [I buffer
    ~ Map namedGroups
    ~ Pattern$GroupHead; groupNodes
    ~ [I temp
    ~ int capturingGroupCount
    ~ int localCount
    ~ int cursor
    ~ int patternLength
    ~ boolean hasSupplementary
    ~ {static} int MAX_REPS
    ~ {static} int GREEDY
    ~ {static} int LAZY
    ~ {static} int POSSESSIVE
    ~ {static} int INDEPENDENT
    ~ {static} Pattern$Node lookbehindEnd
    ~ {static} Pattern$Node accept
    ~ {static} Pattern$Node lastAccept
    ~ {static} boolean $assertionsDisabled

    ~ Map namedGroups() 
    ~ {static} Pattern$CharProperty rangeFor(int arg0, int arg1) 
    ~ int normalizeCharClass(StringBuilder arg0, int arg1) 
    ~ String produceEquivalentAlternation(String arg0) 
    ~ String; producePermutations(String arg0) 
    ~ String composeOneStep(String arg0) 
    ~ void RemoveQEQuoting() 
    ~ {static} void printObjectTree(Pattern$Node arg0) 
    ~ boolean has(int arg0) 
    ~ int readEscaped() 
    ~ int nextEscaped() 
    ~ int peekPastWhitespace(int arg0) 
    ~ int parsePastWhitespace(int arg0) 
    ~ int parsePastLine() 
    ~ int peekPastLine() 
    ~ boolean isLineSeparator(int arg0) 
    ~ void unread() 
    ~ boolean findSupplementary(int arg0, int arg1) 
    ~ {static} boolean isSupplementary(int arg0) 
    ~ Pattern$Node expr(Pattern$Node arg0) 
    ~ Pattern$Node atom() 
    ~ Pattern$CharProperty bitsOrSingle(Pattern$BitClass arg0, int arg1) 
    ~ Pattern$CharProperty unicodeScriptPropertyFor(String arg0) 
    ~ Pattern$CharProperty unicodeBlockPropertyFor(String arg0) 
    ~ Pattern$CharProperty charPropertyNodeFor(String arg0) 
    ~ String groupname(int arg0) 
    ~ Pattern$Node group0() 
    ~ Pattern$Node createGroup(boolean arg0) 
    ~ void addFlag() 
    ~ void subFlag() 
    ~ void setcursor(int arg0) 
    ~ int uxxxx() 
    ~ int u() 
    ~ {static} int countChars(CharSequence arg0, int arg1, int arg2) 
    ~ {static} int countCodePoints(CharSequence arg0) 
    ~ Pattern$CharProperty newSingle(int arg0) 
    ~ Pattern$Node newSlice([I arg0, int arg1, boolean arg2) 
    ~ Pattern$CharProperty caseInsensitiveRangeFor(int arg0, int arg1) 
    ~ {static} Pattern$CharProperty setDifference(Pattern$CharProperty arg0, Pattern$CharProperty arg1) 
    ~ {static} boolean hasBaseCharacter(Matcher arg0, int arg1, CharSequence arg2) 
    + Predicate asPredicate() 
    + Stream splitAsStream(CharSequence arg0) 
    ~ boolean lambda$asPredicate$39(String arg0) 
    ~ int cursor() 
    ~ Pattern$CharProperty clazz(boolean arg0) 
    + String toString() 
    + int flags() 
    ~ void append(int arg0, int arg1) 
    ~ int getClass(int arg0) 
    + {static} boolean matches(String arg0, CharSequence arg1) 
    + String; split(CharSequence arg0, int arg1) 
    + String; split(CharSequence arg0) 
    ~ void compile() 
    + {static} Pattern compile(String arg0) 
    + {static} Pattern compile(String arg0, int arg1) 
    + Matcher matcher(CharSequence arg0) 
    ~ int next() 
    ~ {static} boolean access$200(int arg0, int arg1, int arg2) 
    ~ {static} int access$300(CharSequence arg0, int arg1, int arg2) 
    ~ void readObject(ObjectInputStream arg0) 
    ~ int read() 
    ~ void accept(int arg0, String arg1) 
    ~ {static} boolean access$400(Matcher arg0, int arg1, CharSequence arg2) 
    ~ {static} Pattern$CharProperty access$600(int arg0, int arg1) 
    ~ void normalize() 
    ~ void mark(int arg0) 
    ~ int skip() 
    ~ Pattern$Node ref(int arg0) 
    ~ int peek() 
    ~ int c() 
    ~ Pattern$CharProperty range(Pattern$BitClass arg0) 
    ~ PatternSyntaxException error(String arg0) 
    ~ int escape(boolean arg0, boolean arg1, boolean arg2) 
    + {static} String quote(String arg0) 
    ~ int x() 
    ~ Pattern$CharProperty family(boolean arg0, boolean arg1) 
    ~ int o() 
    ~ {static} boolean inRange(int arg0, int arg1, int arg2) 
    + String pattern() 
    ~ {static} Pattern$CharProperty union(Pattern$CharProperty arg0, Pattern$CharProperty arg1) 
    ~ {static} Pattern$CharProperty intersection(Pattern$CharProperty arg0, Pattern$CharProperty arg1) 
    ~ Pattern$Node closure(Pattern$Node arg0) 
    ~ Pattern$Node sequence(Pattern$Node arg0) 
} 

class PatternSyntaxException extends IllegalArgumentException { 
    ~ {static} long serialVersionUID
    ~ String desc
    ~ String pattern
    ~ int index
    ~ {static} String nl

    + String getDescription() 
    + String getPattern() 
    + String getMessage() 
    + int getIndex() 
} 

enum UnicodeProp { 
    ALPHABETIC,
    LETTER,
    IDEOGRAPHIC,
    LOWERCASE,
    UPPERCASE,
    TITLECASE,
    WHITE_SPACE,
    CONTROL,
    PUNCTUATION,
    HEX_DIGIT,
    ASSIGNED,
    NONCHARACTER_CODE_POINT,
    DIGIT,
    ALNUM,
    BLANK,
    GRAPH,
    PRINT,
    WORD,
    JOIN_CONTROL;

    + {static} UnicodeProp ALPHABETIC
    + {static} UnicodeProp LETTER
    + {static} UnicodeProp IDEOGRAPHIC
    + {static} UnicodeProp LOWERCASE
    + {static} UnicodeProp UPPERCASE
    + {static} UnicodeProp TITLECASE
    + {static} UnicodeProp WHITE_SPACE
    + {static} UnicodeProp CONTROL
    + {static} UnicodeProp PUNCTUATION
    + {static} UnicodeProp HEX_DIGIT
    + {static} UnicodeProp ASSIGNED
    + {static} UnicodeProp NONCHARACTER_CODE_POINT
    + {static} UnicodeProp DIGIT
    + {static} UnicodeProp ALNUM
    + {static} UnicodeProp BLANK
    + {static} UnicodeProp GRAPH
    + {static} UnicodeProp PRINT
    + {static} UnicodeProp WORD
    + {static} UnicodeProp JOIN_CONTROL
    ~ {static} HashMap posix
    ~ {static} HashMap aliases
    ~ {static} UnicodeProp; $VALUES

    + {static} UnicodeProp forPOSIXName(String arg0) 
    + {static} UnicodeProp forName(String arg0) 
    + {static} UnicodeProp; values() 
    + {static} UnicodeProp valueOf(String arg0) 
    + {abstract} boolean is(int arg0) 
} 

@enduml